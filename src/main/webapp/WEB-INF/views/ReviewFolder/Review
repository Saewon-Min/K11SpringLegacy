스프링 프레임워크란?

[프레임 워크]
- 소프트웨어 어플리케이션이나 솔루션의 개발을 수월하게 하기 위해 
	소프트웨어의 구체적 기능들에 해당하는 부분의 설계와 구현을
	재사용 가능하도록 협업화된 형태로 제공하는 소프트웨어 환경을
	말한다. 즉, 프레임워크란 특정한 목적에 맞게 프로그래밍을 쉽게
	하기 위한 "설계의 기본틀" 이라 말할 수 있다.
	
[스프링]
- EJB(Enterprise JavaBeans)로만 할 수 있었던 작업을 평범한 자바빈(POJO)를
	사용해서 할 수 있도록 해준다
- 가벼운 의존성 주입 및 Aspect 기반 컨테이너임과 동시에 프레임워크
- EJB 대신 POJO(Plain Old Java Object)을 기반으로 상호의존성이 적고 
	컨테이너를 통한 개체의 라이프 사이클을 관리함
	XML기반으로 Component를 개발할수 있도록 지원해주는 프레임워크
- 엔터프라이즈 어플리케이션에서 필요한 기능을 제공하는 프레임워크  
- 스프링은 J2EE가 제공하는 다수의 기능을 지원하고 있기 때문에 J2EE를
	대체하는 프레임워크로 자리잡고 있다.
- Plain Old Java Object인 Java Beans를 사용함에도 EJB와 같은 기능의 일을 처리함
- 웹어플리케이션 뿐만 아니라 모든 Java Application 개발에 활용할 수 있다.
- 단순성, 테스트 용이성, 느슨한 결합성(DI의 기능)을 보장 받을 수 있다.
- 부품을 생성하고 조립하는 라이브러리 집합체 라고 할 수 있다.

***스프링의 주요 특징***
[스프링은 자바 객체를 담고 있는 컨테이너]
- Spring FrameWork는 자바 객체의 생성과 소멸같은 라이프 사이클을 관리하며
	필요한 객체를 new없이 사용할 수 있다.
	객체의 라이프 사이클을 관리하기 위하여 DI(Dependency Injection)을 사용하는
	경량 컨테이너 이다.

[스프링은 DI패턴을 지원함]
- 설정파일(XML)을 통해서 객체간의 의존관계를 설정할 수 있다.
	따라서 객체는 직접 의존하고 있는 객체를 생성하거나 검색할 필요가 없다.

[스프링은 AOP지원- 관점을 지향하는 프로그래밍 방식]
- AOP(Aspect Oriented Programming)
- 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통으로 필요로 하지만 실제
	모듈의 핵심은 아닌 기능들을 분리해서 각 모듈에 적용할 수 있다. 즉, 실제
	모듈의 핵심지능에만 신경쓰면 된다.

[스프링은 POJO를 지원]
- 스프링 컨테이너에 저장되는 자바객체는 특정한 인터페이스를 구현하거나 
	클래스를 상속받지 않아도 된다.
	따라서 기존에 작성한 코드를 수정할 필요없이 스프링에서 사용할 수 있다.

[트랜잭션 처리를 위한 일관된 방법 제공]
- JDBC를 사용하거나 컨테이너가 제공하는 트랜잭션을 사용하거나 상관없이
	설정파일을 통해서 트랜잭션 관련 정보를 입력하기 때문에 
	동일한 코드를 여러 환경에서 사용할 수 있다.

[Persistence 계층과 관련한 다양한 API지원]
- JDBC를 비롯하여 iBATIS, Hibernate, JDO등 데이터베이스 처리와 관련하여
	널리 사용되는 라이브러리와의 연동을 지원

[다양한 API에 대한 연동 지원]
- JMS, 메일, 스케줄링 등 엔터프라이즈 어플리케이션을 개발하는데 필요한
	다양한 API를 설정 파일을 통해서 손쉽게 사용할 수 있다.
	
*** Maven ***
- 자바에서 메이븐이라는 것은 빌드 도구로, 라이브러리들을 관리해주고,
	의존성이 있는 경우 상위 라이브러리까지 알아서 사용자 홈 디렉토리
	아래 jar 파일을 모아줍니다.
- 또한 그것을 설정하는 파일이 pom.xml인데 이것을 가지고 있는 자바 프로젝트는
	그 프로젝트 자체가 또 다시 다른 프로젝트를 위한 라이브러리로 쓰일수있어서
	버전명 groupid, architect등을 쓰게 됩니다.
- POM(Project Object Model)


*** Spring MVC ***
- 스프링 프레임워크에 내장되어 있는 웹 프레임워크
- MVC패턴을 기반으로 하기때문에 상호의존도가 낮고 유연한 웹 기반의 어플리케이션을
	작성하기 쉽다.
- 다양한 컨트롤러 제공
- 낮은 결합도(AOP), 의존성주입(DI), 확장성
	=> 대규모 사이트나 유지보수가 많은 사이트에 주로 적용됨
- 요청을 처리하기 위해 컨트롤러를 선택하는 방법과 
  결과를 보여주기 위해 뷰를 선택하는 방식간에 
  낮은 결합도를 유지하고 있다는 점이 중요하다.

*** Spring MVC내에서 처리되는 라이프 사이클 ***
1. 클라이언트의 요청에 대한 최초 진입 지점은 DispatcherServlet이 담당함
2. DispatcherServlet은 Spring Bean Definition에 설정되어 있는 Handler Mapping 
	정보를 참조하여 해당 요청을 처리하기 위한 Controller를 찾는다.
3. DispatcherServlet은 선택된 Controller를 호출하여 클라이언트가 요청한 작업 처리
4. Controller는 Business Model과의 통신을 통해 원하는 작업을 처리한 다음
	요청에 대한 성공 유무에 따라 어떤 View를 보여줄지를 ModelAndView객체에
	저장한 후 DispatcherServlet에 전달한다. ModelAndView 클래스에는 UI Layer에서
	사용할 Model 데이터와 UI Layer로 사용할 View에 대한 정보가 포함되어있다.
5. DispatcherServlet은 ModelAndView의 View의 이름이 논리적인 View정보이면 
	ViewResolver를 참조하여 이 논리적인 View정보를 실질적으로 처리해야할 View를
	생성하게 된다.
6. DispatcherServlet은 ViewResolver를 통하여 전달된 View에게 ModelAndView를 전달하여
	마지막으로 클라이언트에게 원하는 UI를 제공할 수 있도록 한다. 마지막으로
	클라이언트에게 UI를 제공할 책임은 View 클래스가 담당하게 된다.


*** DI(Dependency Injection)와 IOC컨테이너 ***
- 스프링에서 가장 중요한 개념
- IOC(Inversion Of Control : 역제어)의 한 형태
- 의존성 주입 또는 종속객체 주입 이라고함
- 의존성이란 객체와 객체 사이에 존재하는 관계를 의미
- 하나의 객체 안에서 다른 객체를 new 연산자를 이용해서 생성시
 	두 객체간에 결합도가 높아지고 독립성이 떨어짐
- 객체 스스로 new를 통해 필요한 객체를 생성하지 않고 
	설정파일(xml) 즉, 외부에서 주입 받아 낮은 결합도를 유지하는 것이 목적


*** AOP(Aspect Oriented Programming) ***
- 관점 지향 프로그래밍 방식
- 공통 관점(cross-cutting concern)
	즉, 보안, 트랜잭션, 예외처리 등 다른 클래스나 모듈에서 공통으로
	필요한 기능을 분리하여 필요한 모듈에게 제공해 줌으로서 핵심관점에만
	집중 할 수 있도록 하는 프로그래밍 방식을 말한다.
- DI는 객체간의 결합도를 낮게 만드는 것
  AOP는 DI의 확장 개념 	
  	=> 공통적인 관점을 갖고 있는 객체들과의 결합도를 낮게 만드는것
- AOP의 장점
	: 코드의 간결함 + 유지보수의 편의성
- 단점
	: 공통부분이 수정되었을 경우 해당 공통부분을 호출하는 클래스들도 다시
	수정하고 컴파일 해야한다.
	(이 전에는 상속이나 메소드 등으로 공통 부분 처리)
- AOP는 공통 관심사항을 Spring의 AOP프레임워크가 공통관점을 분리해 호출하고
	DI패턴처럼 필요한 클래스나 모듈에 주입하게 된다.

[AOP 관련 용어]
- join point
	: 메소드의 실행 시점 혹은 필드값 변경 등
	어느 위치를 기준으로 공통 모듈이 삽입되는 지점
- point cut
	: 하나의 시작점 혹은 여러 시작점이 모여 point cut이 된다.
	즉, 하나의 joint point나 여러개의 joint point를 묶어서 point cut이라고 한다.
- advice
	: 실제 코딩의 단위
	point cut이 모여서 advice가 되다.
	즉, 중복되는 공통 관심사항을 따로 코드로 만들어놓은것
- weaving
	: advice를 핵심 로직코드에 적용하는 것을 위빙이라고 함
	즉, 공통 코드를 핵심 로직코드에 삽입하는 것
- aspect
	: 여러 객체에 공통으로 적용되는 공통 관심사항
	주로 트랜잭션이나 보안, 로깅 등이 aspect의 좋은 예
	
	
	
[Advice의 종류]
- before advice 
	: 대상 객체의 메소드 호출 전에 공통기능을 실행하는 advice
- after returning advice
	: 대상 객체의 메소드가 예외없이 실행 된 후 실행하는 advice
- after throwing advice
	: 대상 객체의 메소드가 실행하는 도중 예외가 발생한 경우에
		공통기능을 실행하는 advice
- after advice
	: 대상 객체의 메소드를 실행하는 도중에 예외가 발생했는지 여부와
	상관없이 메소드 실행 후 공통 기능을 실행하는 advice
- around advice
	: 대상 객체의 메소드 실행전/후 또는 예외발생 시점에 공통기능을
	실행하는 advice

※ 이들 중 범용적으로 사용되는 것은 Around Advice이다.
	즉, 대상 객체의 메소드를 실행하기 전/후에 원하는 기능을
	삽입할 수 있기 때문이다.
	
	
	



 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
 	                      
  		
  	